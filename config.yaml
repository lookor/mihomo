
# 全局配置
port: 7890 # HTTP(S) 代理服务器端口
socks-port: 7891 # SOCKS5 代理端口
redir-port: 7892 # 透明代理端口，用于 Linux 和 MacOS
mixed-port: 7893 # HTTP(S) 和 SOCKS 代理混合端口

# Transparent proxy server port for Linux (TProxy TCP and TProxy UDP)
tproxy-port: 7894

allow-lan: true # 允许局域网连接
bind-address: "*" # 绑定 IP 地址，仅作用于 allow-lan 为 true，'*'表示所有地址
find-process-mode: off

# 运行模式(任选其一):
# rule: 规则模式 - 根据规则匹配来选择代理
# global: 全局模式 - 全部流量走代理
# direct: 直连模式 - 全部流量不走代理
mode: rule

# 日志等级(按详细程度排序):
# debug: 调试
# info: 信息
# warning: 警告
# error: 错误
# silent: 静默
log-level: warning # 日志等级 silent/error/warning/info/debug

ipv6: false # 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录
unified-delay: true # 统一延迟：统一显示节点延迟

#控制面板
external-controller: 0.0.0.0:9090 # RESTful API 监听地址
secret: "1124" # `Authorization:Bearer ${secret}`

tcp-concurrent: true # TCP 并发连接所有 IP, 将使用最快握手的 TCP

# 配置 WEB UI 目录，使用 http://{{external-controller}}/ui 访问
external-ui: "/etc/mihomo/ui"
global-client-fingerprint: chrome

#  TCP keep alive interval
disable-keep-alive: false #目前在android端强制为true
keep-alive-idle: 600
keep-alive-interval: 15
inbound-tfo: true # 入站TCP Fast Open
outbound-tfo: true # 出站TCP Fast Open

# 连接池配置
connection-pool-size: 256 # 连接池大小,建议值:128-512
idle-timeout: 60 # 空闲超时时间(秒)

profile: # 存储 select 选择记录
  store-selected: true

  # 持久化 fake-ip
  store-fake-ip: true

# 入站
# Tun 配置
tun:
  enable: true
  stack: mixed # gvisor/mixed/system
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-detect-interface: true # 自动识别出口网卡
  auto-route: true # 配置路由表
  # mtu: 9000 # 最大传输单元
  # gso: false # 启用通用分段卸载，仅支持 Linux
  # gso-max-size: 65536 # 通用分段卸载包的最大大小
  auto-redirect: true # 自动配置 iptables 以重定向 TCP 连接。仅支持 Linux。带有 auto-redirect 的 auto-route 现在可以在路由器上按预期工作，无需干预。

# 嗅探域名 可选配置
sniffer:
  enable: true
  sniff: # TLS 和 QUIC 默认如果不配置 ports 默认嗅探 443
    QUIC:
      ports: [443, 8443]
    TLS:
      ports: [443, 8443]

    # 默认嗅探 80
    HTTP: # 需要嗅探的端口
      ports: [80, 8080-8880]
      # 可覆盖 sniffer.override-destination
      override-destination: true
  force-domain:
    - +.v2ex.com
  skip-domain:
    #   - Mijia Cloud
    - +.baidu.com

# DNS 配置
dns:
  enable: true # 关闭将使用系统 DNS
  listen: 0.0.0.0:1053 # 开启 DNS 服务器监听
  ipv6: false # false 将返回 AAAA 的空结果
  default-nameserver:
    - 223.5.5.5
  enhanced-mode: fake-ip # or redir-host

  fake-ip-range: 28.0.0.1/8 # fake-ip 池设置

  # 配置不使用 fake-ip 的域名
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.fliggylink.com"
  fake-ip-filter-mode: blacklist

  respect-rules: true

  # DNS 主要域名配置
  # 支持 UDP，TCP，DoT，DoH，DoQ
  # 这部分为主要 DNS 配置，影响所有直连，确保使用对大陆解析精准的 DNS
  nameserver:
    - 112.4.0.55 #移动dns

  proxy-server-nameserver:
    - https://223.5.5.5/dns-query

#节点信息
#预定义部分锚点
smux-common: &smux-common
  enabled: true
  protocol: "h2mux"
  padding: true
  max-connections: "8"
  min-streams: "16"
  statistic: true
  only-tcp: false

brutal-opts-common: &brutal-opts-common
  enabled: false
  up: "1000 Mbps"
  down: "1000 Mbps"
proxies:
  #自建节点
  - { name: 直连, type: direct }
  - { name: 拒绝, type: reject }

# 机场订阅
# Mihomo 格式的节点或支持 *ray 的分享格式
proxy-providers:
  机场名:
    url: "[订阅地址（机场原始地址/Sub-Store格式化后的地址）]"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

# 选择模式独立定义
# 将自动选择与手动选择的功能锚点单独抽出，便于全局调整选择策略
SelectionModes:
  Auto:
    &AutoSelect {
      type: url-test,
      url: "http://cp.cloudflare.com",
      interval: 300,
      tolerance: 50,
      disable-udp: false,
      hidden: true,
      include-all: true,
    }
  Manual:
    &ManualSelect {
      type: select,
      disable-udp: false,
      hidden: false,
      include-all: true,
    }
  Fallback:
    &FallbackSelect {
      type: fallback,
      include-all: true,
      tolerance: 20,
      interval: 300,
      lazy: false,
    }
  Smart:
    &SmartSelect {
      type: smart,
      include-all: true,
      policy-priority: 牛逼:0.8,
      uselightgbm: true,
      collectdata: true,
      interval: 300
    }
  # -----------------------------------------------
# 正则表达式锚点定义：分类规则
# 自建节点（名字中含有 "BWH"）
FilterSelfBuilt: &FilterSelfBuilt "^.*BWH.*$"

# 锚点定义：排除无效节点信息
FilterInvalidNodes: &FilterInvalidNodes "^((?!(直连|拒绝|网址|剩余|到期|重置)).)*$"
# 订阅节点区域分类
FilterSubHK: &FilterSubHK "^(?=.*(?:香港|HK|Hong Kong))(?!.*(网址|剩余|到期|重置)).*$"
FilterSubTW: &FilterSubTW "^(?=.*(?:台湾|TW|Taiwan))(?!.*(网址|剩余|到期|重置)).*$"
FilterSubSG: &FilterSubSG "^(?=.*(?:新加坡|SG|Singapore|狮城))(?!.*(网址|剩余|到期|重置)).*$"
FilterSubJP: &FilterSubJP "^(?=.*(?:日本|JP|Japan))(?!.*(网址|剩余|到期|重置)).*$"
FilterSubUS: &FilterSubUS "^(?=.*(?:美国|US|United States|America))(?!.*(网址|剩余|到期|重置)).*$"

#出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr:
  &pr {
    type: select,
    proxies:
      [
        🚀 默认代理,
        🧠 智能选择,
        🔯 故障转移,
        🇭🇰🧠 香港智选,
        🇺🇲🧠 美国智选,
        🇭🇰🔯 香港故转,
        🇨🇳🔯 台湾故转,
        🇸🇬🔯 新加坡故转,
        🇯🇵🔯 日本故转,
        🇺🇲🔯 美国故转,
        😁🔯 自建故转,
        🌐 全部节点,
        直连,
        拒绝,
      ],
  }
proxy-groups:
  # ================================
  # 1. 核心主出口组
  # ================================
  - { name: "🚀 默认代理", type: select, proxies: [🧠 智能选择, 🔯 故障转移, 🇭🇰 香港节点, 🇭🇰🧠 香港智选, 🇨🇳 台湾节点, 🇸🇬 新加坡节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇺🇲😁 自建节点] }

  # ================================
  # 2. 应用服务分组
  # ================================
  - { name: "📹 YouTube", type: select, proxies: [😁🧠 自建智选, 🇺🇲😁 自建节点, 🚀 默认代理], icon: "https://raw.githubusercontent.com/Orz-3/mini/master/Color/YouTube.png" }
  - { name: "🤖 ChatGPT", type: select, proxies: [🇺🇲🧠 美国智选, 🇨🇳🔯 台湾故转, 🚀 默认代理], icon: "https://raw.githubusercontent.com/Orz-3/mini/master/Color/OpenAI.png" }
  - { name: "📲 Telegram", type: fallback, proxies: [🔯 故障转移, 🇭🇰🔯 香港故转, 🇸🇬🔯 新加坡故转, 🇯🇵🔯 日本故转], icon: "https://raw.githubusercontent.com/Orz-3/mini/master/Color/Telegram.png" }
  #- { name: "📲 Telegram", type: fallback, proxies: [🔯 故障转移, 🇭🇰🔯 香港故转, 🇸🇬🔯 新加坡故转, 🇯🇵🔯 日本故转], filter: *FilterInvalidNodes, icon: "https://raw.githubusercontent.com/Orz-3/mini/master/Color/Telegram.png" }
  - { name: "🍀 Google", <<: *pr, icon: "https://raw.githubusercontent.com/Orz-3/mini/master/Color/Google.png" }
  - { name: "👨🏿‍💻 GitHub", <<: *pr, icon: "https://raw.githubusercontent.com/Orz-3/mini/refs/heads/master/Color/github.png" }
  - { name: "🐬 OneDrive", <<: *pr }
  - { name: "🎮 游戏平台", <<: *pr }
  #- { name: "🎵 TikTok", <<: *pr, icon: "https://raw.githubusercontent.com/Orz-3/mini/master/Color/TikTok.png" }
  - { name: "🎥 NETFLIX", <<: *pr, icon: "https://raw.githubusercontent.com/Orz-3/mini/master/Color/Netflix.png" }
  - { name: "✈️ Speedtest", <<: *pr, icon: "https://raw.githubusercontent.com/Orz-3/mini/master/Color/Speedtest.png" }
  - { name: "💶 PayPal", <<: *pr, icon: "https://raw.githubusercontent.com/Orz-3/mini/refs/heads/master/Color/Paypal.png" }
  - { name: "🪟 Microsoft", type: select, proxies: [直连, 🚀 默认代理], filter: *FilterInvalidNodes, icon: "https://raw.githubusercontent.com/Orz-3/mini/master/Color/Microsoft.png" }
  - { name: "🍎 Apple", type: select, proxies: [直连, 🚀 默认代理], filter: *FilterInvalidNodes, icon: "https://raw.githubusercontent.com/Orz-3/mini/master/Color/Apple.png" }

  # ================================
  # 3. 系统用途组
  # ================================
  - { name: "🎯 直连", type: select, proxies: [直连, 🚀 默认代理] }
  - { name: "🐟 漏网之鱼", type: select, proxies: [直连, 🚀 默认代理] }

  # ================================
  # 4. 全部节点选择类
  # ================================
  #- { name: "♻️ 自动选择", <<: *AutoSelect, filter: *FilterInvalidNodes }
  - { name: "🧠 智能选择", <<: *SmartSelect, filter: *FilterInvalidNodes }
  - { name: "🔯 故障转移", <<: *FallbackSelect, filter: *FilterInvalidNodes }
  - { name: "🌐 全部节点", <<: *ManualSelect, filter: *FilterInvalidNodes }

  # ================================
  # 5. 自建节点分组
  # ================================
  #- { name: "😁♻️ 自建自动", <<: *AutoSelect, filter: *FilterSelfBuilt }
  - { name: "🇺🇲😁 自建节点", <<: *ManualSelect, filter: *FilterSelfBuilt }
  - { name: "😁🧠 自建智选", <<: *SmartSelect, filter: *FilterSelfBuilt }
  - { name: "😁🔯 自建故转", <<: *FallbackSelect, filter: *FilterSelfBuilt, proxies: [🇺🇲😁 自建节点, 😁🧠 自建智选] }

  # ================================
  # 6. 地区机场节点
  # ================================
    # 自动选择
  #- { name: "🇭🇰♻️ 香港自动", <<: *AutoSelect, filter: *FilterSubHK }
  #- { name: "🇨🇳♻️ 台湾自动", <<: *AutoSelect, filter: *FilterSubTW }
  #- { name: "🇸🇬♻️ 新加坡自动", <<: *AutoSelect, filter: *FilterSubSG }
  #- { name: "🇯🇵♻️ 日本自动", <<: *AutoSelect, filter: *FilterSubJP }
  #- { name: "🇺🇲♻️ 美国自动", <<: *AutoSelect, filter: *FilterSubUS }
    # 手动选择
  - { name: "🇭🇰 香港节点", <<: *ManualSelect, filter: *FilterSubHK }
  - { name: "🇨🇳 台湾节点", <<: *ManualSelect, filter: *FilterSubTW }
  - { name: "🇸🇬 新加坡节点", <<: *ManualSelect, filter: *FilterSubSG }
  - { name: "🇯🇵 日本节点", <<: *ManualSelect, filter: *FilterSubJP }
  - { name: "🇺🇲 美国节点", <<: *ManualSelect, filter: *FilterSubUS }
    # 故障转移组
  - { name: "🇭🇰🔯 香港故转", <<: *FallbackSelect, filter: *FilterSubHK, proxies: [🇭🇰 香港节点, 🇭🇰🧠 香港智选] }
  - { name: "🇨🇳🔯 台湾故转", <<: *FallbackSelect, filter: *FilterSubTW, proxies: [🇨🇳 台湾节点, 🇨🇳🧠 台湾智选] }
  - { name: "🇸🇬🔯 新加坡故转", <<: *FallbackSelect, filter: *FilterSubSG, proxies: [🇸🇬 新加坡节点, 🇸🇬🧠 新加坡智选] }
  - { name: "🇯🇵🔯 日本故转", <<: *FallbackSelect, filter: *FilterSubJP, proxies: [🇯🇵 日本节点, 🇯🇵🧠 日本智选] }
  - { name: "🇺🇲🔯 美国故转", <<: *FallbackSelect, filter: *FilterSubUS, proxies: [🇺🇲 美国节点, 🇺🇲🧠 美国智选] }
    #智选组
  - { name: "🇭🇰🧠 香港智选", <<: *SmartSelect, filter: *FilterSubHK }
  - { name: "🇨🇳🧠 台湾智选", <<: *SmartSelect, filter: *FilterSubTW }
  - { name: "🇸🇬🧠 新加坡智选", <<: *SmartSelect, filter: *FilterSubSG }
  - { name: "🇯🇵🧠 日本智选", <<: *SmartSelect, filter: *FilterSubJP }
  - { name: "🇺🇲🧠 美国智选", <<: *SmartSelect, filter: *FilterSubUS }

  # ================================
  # 7. 其他节点
  # ================================
  - { name: 其他节点, <<: *ManualSelect, filter: "(?i)^(?!.*(直连|拒绝|香港|台湾|日本|新加坡|美国|BWH)).*" }
  - name: 🛑 广告拦截
    type: select
    proxies:
      - REJECT
      - DIRECT

  - name: 🆎 AdBlock
    type: select
    proxies:
      - REJECT
      - DIRECT

  - name: 🛡️ 隐私防护
    type: select
    proxies:
      - REJECT
      - DIRECT

# 规则集
rule-anchor:
  ip: &ip { type: http, interval: 86400, behavior: ipcidr, format: mrs }
  domain: &domain { type: http, interval: 86400, behavior: domain, format: mrs }
  class:
    &class { type: http, interval: 86400, behavior: classical, format: text }
rule-providers:
  # 广告规则
  reject:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt"
    #path: ./ruleset/reject.yaml
    interval: 86400

  # 隐私规则
  privacy:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script/rule/Clash/Privacy/Privacy.yaml"
    #path: ./ruleset/privacy.yaml
    interval: 86400

  # 广告扩展规则
  reject-extra:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script/rule/Clash/AdvertisingLite/AdvertisingLite.yaml"
    #path: ./ruleset/reject-extra.yaml
    interval: 86400

  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list" }
  ai: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs" }
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs" }
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  apple-cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.mrs" }
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  # 游戏平台规则
  blizzard_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/blizzard.mrs" }
  epicgames_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/epicgames.mrs" }
  steam_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs" }
  xbox_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/xbox.mrs" }
  nintendo_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/nintendo.mrs" }
  sony_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/sony.mrs" }
  #tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }

# 规则匹配
rules:
  # 优先处理
  - RULE-SET,reject,🛑 广告拦截,no-resolve
  - RULE-SET,privacy,🛡️ 隐私防护,no-resolve
  - RULE-SET,reject-extra,🆎 AdBlock,no-resolve
  
  # 本地局域网
  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,blizzard_domain,🎮 游戏平台,no-resolve
  - RULE-SET,epicgames_domain,🎮 游戏平台,no-resolve
  - RULE-SET,steam_domain,🎮 游戏平台,no-resolve
  - RULE-SET,xbox_domain,🎮 游戏平台,no-resolve
  - RULE-SET,nintendo_domain,🎮 游戏平台,no-resolve
  - RULE-SET,sony_domain,🎮 游戏平台,no-resolve
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  #- RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连

  #ip规则
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连

# 自定义规则
  - PROCESS-NAME,Thunder,DIRECT
  - PROCESS-NAME,DownloadService,DIRECT
  - PROCESS-NAME,qBittorrent,DIRECT
  - PROCESS-NAME,Transmission,DIRECT
  - PROCESS-NAME,fdm,DIRECT
  - PROCESS-NAME,aria2c,DIRECT
  - PROCESS-NAME,Folx,DIRECT
  - PROCESS-NAME,NetTransport,DIRECT
  - PROCESS-NAME,uTorrent,DIRECT
  - PROCESS-NAME,WebTorrent,DIRECT

  # 地域规则
  - GEOIP,LAN,DIRECT,no-resolve
  - GEOIP,CN,DIRECT,no-resolve

  # 兜底规则
  - MATCH,🐟 漏网之鱼
